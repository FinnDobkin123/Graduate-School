##########################Lab 1##########################
##Image 1
library(tidyverse, ggplot2)
#Readjust default settings for alignment of title
theme_update(plot.title = element_text(hjust = 0.5))

#Create ggplot object
x <- ggplot(data = mart_data, aes(x= Outlet_Identifier, y=Item_Outlet_Sales)) +
  geom_boxplot(fill='#F8766D', color="black") +
  scale_y_continuous(breaks=seq(0,13500,500)) +
  labs(title = 'Box Plot') +
  xlab('Outlet Identifier') +
  ylab('Item Outlet Sales') +
  theme_bw() 

#Print ggplot object
print(x)


##Image 2
ggplot(data=mart_data, aes(x=Item_Visibility, y=Item_MRP, colour=Item_Type)) +
  geom_point() +
  facet_wrap(~Item_Type) +
  theme_bw() +
  ggtitle('MRP versus Visibility by Item Type') +
  xlab('Item Visibility') +
  ylab('Item MRP') +
  scale_y_continuous(breaks=seq(0,270,30)) +
  scale_x_continuous(breaks=seq(0,0.30,0.05))


##Image 3
ggplot(data=mart_data, aes(x=Outlet_Location_Type, fill=Outlet_Type)) +
  geom_bar() +
  theme_bw() +
  ggtitle('Stacked Bar Chart') +
  ylab('Count of Outlets') +
  xlab('Outlet Location Type')

#Image 4
ggplot(mart_data, aes(x=Item_Outlet_Sales)) + 
  geom_freqpoly(aes(color = Outlet_Size), binwidth=0.02) +
  scale_x_log10() +
  theme_bw() +
  labs(
    y='Count of Sales',
    x='Log10 of Outlet Sales'
  ) +
  scale_y_continuous(breaks=seq(0,100,10), labels=seq(0,100,10), limits= c(0,100)) 


##########################Lab 2##########################
---
title: 'Lab 2: Flights'
author: "Finn Dobkin"
date: "7/12/2021"
output: html_document
---
##Prepare document and import libraries
```{r setup, include=FALSE}
#Import libraries
library(tidyverse)
library(nycflights13)
library(plyr)

```
##Variables
year -- Year
month -- Month
day -- Day
dep_time -- Departure Time
arr_time -- Arrival Time
sched_dep_time -- Scheduled Departure Time
sched_arr_time -- Scheduled Arrival Time
dep_delay -- Departure Delay
arr_delay -- Arrival Delay
carrier -- Airline carrier
flight -- Flight number
tailnum -- Plane tail number
origin -- Origin
dest -- Destination
air_time -- Amount of time in air (minutes)
distance -- Distance between origin and destination
hour -- Time of scheduled departure
minute -- Time of scheduled departure
time_hour -- Scheduled date and hour of flight 
##Question 1: What time of day should you fly if you want to avoid delays as much as possible? complete
```{r}
#Calculate total number of delays
flights <- flights %>% #Calculate total number of delays
  mutate(total_delays = arr_delay + dep_delay) 

#Group by time and drop group structure
flight_day <- flights %>%
  dplyr::group_by(hour, minute) %>% 
  dplyr::summarise(n(), .groups = 'drop') 
  
#Rename to use with order function
flight_day <- flight_day %>% 
  dplyr::rename(count_delay = 'n()')

#Order smallest to largest
flight_day <- flight_day[with(flight_day, order(count_delay)), ] 

#Final Answer: There are multiple times with only 1 delay. These include the following: 1:06, 5:1, 5:27, 5:28, 5:37, 6:26, 6:57, 21:33, 21:01, 22:8, 22:10, 22:27, 23:15, 23:39, 23:45
```


##Question 2: For each destination, compute the total minutes of arrival delay. For each flight, compute the proportion of the arrival delay for its destination. Complete
```{r}
#Group by destination and obtain sum of arrival delays
flights_sum_two <- flights %>% 
  #Group by destination
  group_by(dest) %>% 
  #Summarize the sum of arrival delay by destination
  summarise_at(vars(arr_delay), list(name = sum), na.rm=TRUE) 

#Join dataframe generated in previous task to flights dataframe. 
complete_file <- left_join(flights, flights_sum_two, by = "dest")
#Generate a new variable that is the arrival delay for one flight over the total delay at the airport
complete_file <- complete_file %>%
  mutate(delay_prop = arr_delay / name)
```


##Question 3: Delays are typically temporally correlated: even once the problem that caused the initial delay has been resolved, later flights are delayed to allow earlier flights to leave. Using the function lag(), explore how the departure delay of a flight is related to the delay of the immediately preceding flight. 
```{r}

```

##Question 4: Find all destinations that are flown by at least two carriers. (hint: use n_distinct()) 
```{r}
flight_dest <- flights %>%
#Group by destination
  dplyr::group_by(dest) %>%
#Obtain the count of each carrier 
  dplyr::summarise(count = n_distinct(carrier)) %>%
#Filter out any values flown by a carrier that are less than 2 
  dplyr::filter(count >= 2)

#Final Answer: 76
```

##Question 5: Look at each destination. Can you find flights that are suspiciously fast? (i.e. flights that represent a potential data entry error). Compute the air time of a flight relative to the shortest flight to that destination. Which flights were most delayed in the air? Complete
```{r}
#Create a new dataframe that identifies the flights that were took the shortest time and the longest time by destination and origin
flights_sus <- flights %>%
#Group by flight path (destination and origin) and include distance (This won't impact the destination and origin because those should be constant)
    dplyr::group_by(dest, distance, origin) %>%
#Find the slowest and fastest time by flight route
    dplyr::summarise(
    max_time = max(air_time, na.rm = TRUE),
    min_time = min(air_time, na.rm = TRUE)
  ) %>%
#Calculate the speed of the slowest and fastest times
    mutate(max_time_hours = max_time / 60,
         min_time_hours = min_time / 60,
         speed_low = distance / max_time_hours,
         speed_high = distance / min_time_hours) 
  



#Answer: The flights from LGA to EWR average 0 MPH, which was the largest outlier. The other suscpicious flights include PHL to LGA, ACK to JFK, PHL to JFK, and DCA to LGA. The minimum time of these flew under 100 MPH. 
```
